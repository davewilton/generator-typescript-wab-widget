/// <amd-dependency path="dojo/text!./resources/templates/<%=subWidgetName%>.html" name="template" />
/// <amd-dependency path="dojo/i18n!./resources/nls/strings" name="nls" />
/// <amd-dependency path="xstyle/css!./resources/css/<%= subWidgetName %>.css" name="style" />
declare let template: any;
declare let nls: any;
declare let style: any;

// dojo
import dojoDeclare = require("dojo/_base/declare");
import lang = require("dojo/_base/lang");

// dijit
import TemplatedMixin = require("dijit/_TemplatedMixin");
import WidgetBase = require("dijit/_WidgetBase");
import WidgetsInTemplateMixin = require("dijit/_WidgetsInTemplateMixin");

// esri
import Map = require("esri/map");

// local
import declareDecorator = require("./resources/declareDecorator");
import IConfig = require("./resources/IConfig<%= subWidgetName %>");

@declareDecorator(WidgetBase, TemplatedMixin, WidgetsInTemplateMixin)
class <%=subWidgetName%> {

    // description: <%= description %>

    // public properties
    public domNode: HTMLElement;

    // private properties
    public baseClass: string = "<%= baseClass %>";
    public templateString: string = template;
    public map: Map;
    private nls: any = nls;
    private config: IConfig;


    /**
     * Creates an instance of <%=subWidgetName%>.
     * @param {{config: IConfig, map: Map}} params
     * @param {dojo.NodeOrString} [srcNodeRef] optional node/node id to place widget on
     * @memberof <%=subWidgetName%>
     */
    constructor(params?: {config: IConfig, map: Map}, srcNodeRef?: dojo.NodeOrString) {
        this.map = params.map;
        this.config = params.config;
    }

    public startup(): void {
        console.log(this.baseClass + "::startup");

        // test the config file interface
        console.log(this.config.serviceUrl);

        // required for dojo inheritance to call the superclass
        const self: any = this;
        self.inherited(arguments);
    }
}

export = <%=subWidgetName%>;
